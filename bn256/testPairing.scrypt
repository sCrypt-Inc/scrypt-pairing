import "bn256.scrypt";
import "bn256pairing.scrypt";


contract BN256PairingTest {

    public function testLineFuncAdd(TwistPoint r, TwistPoint p, CurvePoint q, FQ2 r2, LineFuncRes res) {
        require(BN256Pairing.lineFuncAdd(r, p, q, r2) == res);
    }

    public function testLineFuncDouble(TwistPoint r, CurvePoint q, LineFuncRes res) {
        require(BN256Pairing.lineFuncDouble(r, q) == res);
    }

    public function testMulLine(FQ12 ret, FQ2 a, FQ2 b, FQ2 c, FQ12 res) {
        require(BN256Pairing.mulLine(ret, a, b, c) == res);
    }

    public function testMiller(TwistPoint a, CurvePoint b, FQ12 res) {
        require(BN256Pairing.miller(a, b) == res);
    }

    public function testFinalExp(FQ12 a, FQ12 res) {
        require(BN256Pairing.finalExponentiation(a) == res);
    }

    public function testPair(CurvePoint g1, TwistPoint g2, FQ12 res) {
        require(BN256Pairing.pairInternal(g1, g2) == res); 
    }

    //public function testPairResEquality(CurvePoint g1, TwistPoint g2, int n) {
    //    // Tests e(nP, Q) == e(P, nQ) == e(P, Q)^n
    //    FQ12 res0 = BN256Pairing.pairInternal(BN256.mulCurvePoint(g1, n, BN256.P), g2);
    //    FQ12 res1 = BN256Pairing.pairInternal(g1, BN256.mulTwistPoint(g2, n, BN256.P));
    //    FQ12 res2 = BN256.expFQ12(BN256Pairing.pairInternal(g1, g2), n, BN256.P);
    //    require(res0 == res1 && res1 == res2); 
    //}

}

